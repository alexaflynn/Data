{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOE4EfmgXs/SCZJDo5Wsm7V",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alexaflynn/Data/blob/main/Alexa_Flynn_Stats_Lab_6\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DcIyz7CRFZLo"
      },
      "outputs": [],
      "source": [
        "import numpy as np \n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import pandas as pd \n",
        "import urllib.request"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://raw.githubusercontent.com/alexaflynn/Data/main/cereal_data.csv\""
      ],
      "metadata": {
        "id": "FI-fhn3oJFG_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "urllib.request.urlretrieve(url,'cereal_data.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ce-27tu3JMS2",
        "outputId": "35cb474e-e1a6-47dc-eed8-37f803484fd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('cereal_data.csv', <http.client.HTTPMessage at 0x7f19f3cee390>)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cereal_data = pd.read_csv('cereal_data.csv')"
      ],
      "metadata": {
        "id": "8TV1R5Q6JzcY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cereal_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "DDml1vaXKiL8",
        "outputId": "fc583246-c8f7-4abb-8c27-5b1a98b60a6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         name mfr type  calories  protein  fat  sodium  fiber  \\\n",
              "0                   100% Bran   N    C        70        4    1     130   10.0   \n",
              "1           100% Natural Bran   Q    C       120        3    5      15    2.0   \n",
              "2                    All-Bran   K    C        70        4    1     260    9.0   \n",
              "3   All-Bran with Extra Fiber   K    C        50        4    0     140   14.0   \n",
              "4              Almond Delight   R    C       110        2    2     200    1.0   \n",
              "..                        ...  ..  ...       ...      ...  ...     ...    ...   \n",
              "72                    Triples   G    C       110        2    1     250    0.0   \n",
              "73                       Trix   G    C       110        1    1     140    0.0   \n",
              "74                 Wheat Chex   R    C       100        3    1     230    3.0   \n",
              "75                   Wheaties   G    C       100        3    1     200    3.0   \n",
              "76        Wheaties Honey Gold   G    C       110        2    1     200    1.0   \n",
              "\n",
              "    carbo  sugars  potass  vitamins  shelf  weight  cups     rating  \n",
              "0     5.0       6     280        25      3     1.0  0.33  68.402973  \n",
              "1     8.0       8     135         0      3     1.0  1.00  33.983679  \n",
              "2     7.0       5     320        25      3     1.0  0.33  59.425505  \n",
              "3     8.0       0     330        25      3     1.0  0.50  93.704912  \n",
              "4    14.0       8      -1        25      3     1.0  0.75  34.384843  \n",
              "..    ...     ...     ...       ...    ...     ...   ...        ...  \n",
              "72   21.0       3      60        25      3     1.0  0.75  39.106174  \n",
              "73   13.0      12      25        25      2     1.0  1.00  27.753301  \n",
              "74   17.0       3     115        25      1     1.0  0.67  49.787445  \n",
              "75   17.0       3     110        25      1     1.0  1.00  51.592193  \n",
              "76   16.0       8      60        25      1     1.0  0.75  36.187559  \n",
              "\n",
              "[77 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-76d61c37-e422-4111-8592-623dc2c23e68\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>mfr</th>\n",
              "      <th>type</th>\n",
              "      <th>calories</th>\n",
              "      <th>protein</th>\n",
              "      <th>fat</th>\n",
              "      <th>sodium</th>\n",
              "      <th>fiber</th>\n",
              "      <th>carbo</th>\n",
              "      <th>sugars</th>\n",
              "      <th>potass</th>\n",
              "      <th>vitamins</th>\n",
              "      <th>shelf</th>\n",
              "      <th>weight</th>\n",
              "      <th>cups</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100% Bran</td>\n",
              "      <td>N</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>130</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6</td>\n",
              "      <td>280</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>68.402973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100% Natural Bran</td>\n",
              "      <td>Q</td>\n",
              "      <td>C</td>\n",
              "      <td>120</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>15</td>\n",
              "      <td>2.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8</td>\n",
              "      <td>135</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>33.983679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>All-Bran</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>70</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>260</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5</td>\n",
              "      <td>320</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.33</td>\n",
              "      <td>59.425505</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All-Bran with Extra Fiber</td>\n",
              "      <td>K</td>\n",
              "      <td>C</td>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0</td>\n",
              "      <td>330</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.50</td>\n",
              "      <td>93.704912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Almond Delight</td>\n",
              "      <td>R</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>200</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>8</td>\n",
              "      <td>-1</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.75</td>\n",
              "      <td>34.384843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>Triples</td>\n",
              "      <td>G</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>250</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>3</td>\n",
              "      <td>60</td>\n",
              "      <td>25</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.75</td>\n",
              "      <td>39.106174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>Trix</td>\n",
              "      <td>G</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>140</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>12</td>\n",
              "      <td>25</td>\n",
              "      <td>25</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>27.753301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>Wheat Chex</td>\n",
              "      <td>R</td>\n",
              "      <td>C</td>\n",
              "      <td>100</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>230</td>\n",
              "      <td>3.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3</td>\n",
              "      <td>115</td>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.67</td>\n",
              "      <td>49.787445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>Wheaties</td>\n",
              "      <td>G</td>\n",
              "      <td>C</td>\n",
              "      <td>100</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>200</td>\n",
              "      <td>3.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3</td>\n",
              "      <td>110</td>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>51.592193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>Wheaties Honey Gold</td>\n",
              "      <td>G</td>\n",
              "      <td>C</td>\n",
              "      <td>110</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>200</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>8</td>\n",
              "      <td>60</td>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.75</td>\n",
              "      <td>36.187559</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>77 rows × 16 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76d61c37-e422-4111-8592-623dc2c23e68')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-76d61c37-e422-4111-8592-623dc2c23e68 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-76d61c37-e422-4111-8592-623dc2c23e68');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cereal_data[\"sugars\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QZ6uS_4PKjvs",
        "outputId": "98a2976c-91e5-41ab-dfd3-58019f60bca2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      6\n",
              "1      8\n",
              "2      5\n",
              "3      0\n",
              "4      8\n",
              "      ..\n",
              "72     3\n",
              "73    12\n",
              "74     3\n",
              "75     3\n",
              "76     8\n",
              "Name: sugars, Length: 77, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cereal_data[\"sugars\"].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lHTPtlFILVZ7",
        "outputId": "634a24fd-31fb-47f0-9a7c-3577e26fd2e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.922077922077922"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cereal_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "AD1pAaJ_MEwb",
        "outputId": "2343a451-7b84-4fd0-f245-88c1405e1288"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         calories    protein        fat      sodium      fiber      carbo  \\\n",
              "count   77.000000  77.000000  77.000000   77.000000  77.000000  77.000000   \n",
              "mean   106.883117   2.545455   1.012987  159.675325   2.151948  14.597403   \n",
              "std     19.484119   1.094790   1.006473   83.832295   2.383364   4.278956   \n",
              "min     50.000000   1.000000   0.000000    0.000000   0.000000  -1.000000   \n",
              "25%    100.000000   2.000000   0.000000  130.000000   1.000000  12.000000   \n",
              "50%    110.000000   3.000000   1.000000  180.000000   2.000000  14.000000   \n",
              "75%    110.000000   3.000000   2.000000  210.000000   3.000000  17.000000   \n",
              "max    160.000000   6.000000   5.000000  320.000000  14.000000  23.000000   \n",
              "\n",
              "          sugars      potass    vitamins      shelf     weight       cups  \\\n",
              "count  77.000000   77.000000   77.000000  77.000000  77.000000  77.000000   \n",
              "mean    6.922078   96.077922   28.246753   2.207792   1.029610   0.821039   \n",
              "std     4.444885   71.286813   22.342523   0.832524   0.150477   0.232716   \n",
              "min    -1.000000   -1.000000    0.000000   1.000000   0.500000   0.250000   \n",
              "25%     3.000000   40.000000   25.000000   1.000000   1.000000   0.670000   \n",
              "50%     7.000000   90.000000   25.000000   2.000000   1.000000   0.750000   \n",
              "75%    11.000000  120.000000   25.000000   3.000000   1.000000   1.000000   \n",
              "max    15.000000  330.000000  100.000000   3.000000   1.500000   1.500000   \n",
              "\n",
              "          rating  \n",
              "count  77.000000  \n",
              "mean   42.665705  \n",
              "std    14.047289  \n",
              "min    18.042851  \n",
              "25%    33.174094  \n",
              "50%    40.400208  \n",
              "75%    50.828392  \n",
              "max    93.704912  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5f5f4c0e-3c70-43bb-b51b-38fbc2efe0b6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>calories</th>\n",
              "      <th>protein</th>\n",
              "      <th>fat</th>\n",
              "      <th>sodium</th>\n",
              "      <th>fiber</th>\n",
              "      <th>carbo</th>\n",
              "      <th>sugars</th>\n",
              "      <th>potass</th>\n",
              "      <th>vitamins</th>\n",
              "      <th>shelf</th>\n",
              "      <th>weight</th>\n",
              "      <th>cups</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>106.883117</td>\n",
              "      <td>2.545455</td>\n",
              "      <td>1.012987</td>\n",
              "      <td>159.675325</td>\n",
              "      <td>2.151948</td>\n",
              "      <td>14.597403</td>\n",
              "      <td>6.922078</td>\n",
              "      <td>96.077922</td>\n",
              "      <td>28.246753</td>\n",
              "      <td>2.207792</td>\n",
              "      <td>1.029610</td>\n",
              "      <td>0.821039</td>\n",
              "      <td>42.665705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>19.484119</td>\n",
              "      <td>1.094790</td>\n",
              "      <td>1.006473</td>\n",
              "      <td>83.832295</td>\n",
              "      <td>2.383364</td>\n",
              "      <td>4.278956</td>\n",
              "      <td>4.444885</td>\n",
              "      <td>71.286813</td>\n",
              "      <td>22.342523</td>\n",
              "      <td>0.832524</td>\n",
              "      <td>0.150477</td>\n",
              "      <td>0.232716</td>\n",
              "      <td>14.047289</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>18.042851</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>100.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.670000</td>\n",
              "      <td>33.174094</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>110.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>40.400208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>110.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>210.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>50.828392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>160.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>320.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>330.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>93.704912</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f5f4c0e-3c70-43bb-b51b-38fbc2efe0b6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5f5f4c0e-3c70-43bb-b51b-38fbc2efe0b6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5f5f4c0e-3c70-43bb-b51b-38fbc2efe0b6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(cereal_data[[\"sugars\"]],cereal_data[[\"calories\"]],\".\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "RP5b1MgtMlR8",
        "outputId": "e1076085-280c-4ebe-ca1b-4d6eecb02ece"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f19f2b19dd0>]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAT/0lEQVR4nO3db5Bd9X3f8fcHZOLgdoJAa8ACI0gBBzRxDFtQGjclIU2Ek4nyIJPBdg1JYOgf7ITUU0c405Dpg1YtGTvxJMWliIAnAspQO2ZcIKYqLumMJXcFNkjINhrZElJEWDC4nbg2VvTtg3tFlmW10u492nP27Ps1o9l7zr179NHdvR+d/e2995uqQpLULye0HUCS1DzLXZJ6yHKXpB6y3CWphyx3SeqhZW0HAFixYkWtWrWq7RiStKhs27btxaoam+m6TpT7qlWrmJiYaDuGJC0qSfYc6TqXZSSphyx3Seohy12Seshyl6QestwlqYeOWu5J7kzyQpLt0/Z/KMlXk+xI8h+m7L85ya4kX0vyc8cjtCRpdsfyVMi7gD8CPnV4R5KfAtYB76yq7yV563D/RcDVwMXA24D/nuSCqvqbpoNL0rHatudltux+iTXnncal5yxvO86COGq5V9XjSVZN2/3PgQ1V9b3hbV4Y7l8H3Dfc/40ku4DLgC82lliS5mDbnpd5/x1bePXgIU5adgKbrl+zJAp+vmvuFwD/MMnWJP8zyd8f7l8JPDfldvuG+94gyQ1JJpJMTE5OzjOGJM1uy+6XePXgIQ4VfP/gIbbsfqntSAtivuW+DDgVWAP8K+D+JJnLAarq9qoar6rxsbEZXz0rSSNbc95pnLTsBE4MvGnZCaw577S2Iy2I+b79wD7g0zUY4/SlJIeAFcB+4OwptztruE+SWnHpOcvZdP0a19yP0Z8BPwU8luQC4CTgReBB4J4kH2PwC9XzgS81EVSS5uvSc5YvmVI/7KjlnuRe4ApgRZJ9wC3AncCdw6dHvgpcOzyL35HkfuAZ4CBwo8+UkaSFly4MyB4fHy/fFVKS5ibJtqoan+k6X6EqST1kuUtSD1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ5a7JPWQ5S5JPWS5S1IPWe6SGnPP1r18YONW7tm6t+0oS9583xVSkl7nnq17+ehnngbgL559EYD3Xf72NiMtaZ65S2rEw9sPzLqthWW5S2rEVavPnHVbC8tlGUmNOLwE8/D2A1y1+kyXZFpmuUtqzPsuf7ul3hEuy0hSD1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ5a7JPWQ5S5JPWS5S1IPWe6S1EOWuyT10FHLPcmdSV5Isn2G6z6cpJKsGG4nySeS7EryVJJLjkdoSdLsjuXM/S5g7fSdSc4GfhaYOnLlKuD84Z8bgNtGjyi1Z9uel/njx3axbc/LbUd5na7mWgoWy31/1HeFrKrHk6ya4aqPAx8BPjtl3zrgU1VVwJYkpyQ5s6p8134tOtv2vMz779jCqwcPcdKyE9h0/RouPWd527E6m2spWEz3/bzW3JOsA/ZX1VemXbUSeG7K9r7hvpmOcUOSiSQTk5OT84khHVdbdr/EqwcPcajg+wcPsWX3S21HArqbaylYTPf9nMs9ycnAR4HfHeUvrqrbq2q8qsbHxsZGOZR0XKw57zROWnYCJwbetOwE1px3WtuRgO7mWgoW030/n2EdPwycC3wlCcBZwBNJLgP2A2dPue1Zw33SonPpOcvZdP0atux+iTXnndaZH7+7mmspWEz3/ZzLvaqeBt56eDvJN4HxqnoxyYPAB5PcB1wOfNv1di1ml56zvJMP4K7mWgoWy31/LE+FvBf4InBhkn1Jrpvl5g8Bu4FdwH8G/kUjKSVJc3Isz5Z571GuXzXlcgE3jh5LkjQKX6EqST1kuUtSD1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ5a7JPWQ5S5JPWS5S1IPWe7SAunqBJ+u5tJo5vOWv5LmqKsTfLqaS6PzzF1aAF2d4NPVXBqd5S4tgK5O8OlqLo0ug3fpbdf4+HhNTEy0HUM6rrbtebmTE3y6mktHl2RbVY3PdJ1r7tIC6eoEn67m0mhclpGkHrLcJamHLHdJ6iHLXZJ6yHKXpB6y3CWphyx3Seohy12Seshyl6QestwlqYcsd0nqoaOWe5I7k7yQZPuUfbcm+WqSp5J8JskpU667OcmuJF9L8nPHK7gk6ciO5cz9LmDttH2PAqur6keBrwM3AyS5CLgauHj4Of8xyYmNpVWnOMFnbpq8v+7ZupcPbNzKPVv3dipXk8fa8NBOrrj1MTY8tHPkYzVpsXzfH/VdIavq8SSrpu37/JTNLcAvDy+vA+6rqu8B30iyC7gM+GIjadUZTvCZmybvr3u27uWjn3kagL949kUA3nf521vP1eSxNjy0k08+vhvgtY/r3/Mj8zpWkxbT930Ta+6/Djw8vLwSeG7KdfuG+94gyQ1JJpJMTE5ONhBDC8kJPnPT5P318PYDs263lavJYz2y4/lZt9uymL7vRyr3JL8DHAQ2zfVzq+r2qhqvqvGxsbFRYqgFTvCZmybvr6tWnznrdlu5mjzW2ovPmHW7LYvp+/6YJjENl2U+V1Wrp+z7VeCfAldW1XeG+24GqKp/N9z+c+D3qmrWZRknMS1OTvCZmybvr3u27uXh7Qe4avWZ816SOR65mjzWhod28siO51l78RmdWJI5rEvf97NNYppXuSdZC3wM+EdVNTnldhcD9zBYZ38bsBk4v6r+ZrbjW+6SNHcjjdlLci9wBbAiyT7gFgbPjvkB4NEkAFuq6p9V1Y4k9wPPMFiuufFoxS5Jap4DsiVpkZrtzN1XqEpSD1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ5a7JPWQ5S5JPWS5S1IPWe6S1EOW+3HQ1ck2AO/esJlz1/833r1hcyPH66KuTjzq6vSkrv4bb7rvSX7s33yem+57cuRjNTnVqcuP76mO+sZhmpuuTraBQbHve+W7AOx75bu8e8Nm/tf6K+d9vC7q6sSjrk5P6uq/8ab7nuTPvvyXAK99/IOr3zWvYzU51anLj+/pPHNvWFcn2wDsHxb7kbb7oKsTj7o6Pamr/8YvfH1y1u25aHKqU5cf39NZ7g3r6mQbgJWnvHnW7T7o6sSjrk5P6uq/8YoLxmbdnosmpzp1+fE9nW/5exx0dbINDJZm9r/yXVae8ubeLckc1tWJR12dntTVf+NN9z3JF74+yRUXjM17SeawJqc6denxPfIkpuOtb+UuSQvB93OXpCXGcpekHrLcJamHLHdJ6iHLXZJ6yHKXpB6y3CWphyx3Seohy12Seshyl6QestwlqYeOWu5J7kzyQpLtU/admuTRJM8OPy4f7k+STyTZleSpJJccz/CSpJkdy5n7XcDaafvWA5ur6nxg83Ab4Crg/OGfG4Dbmok5s8UyEWUUTee6ZuNW3vGvH+aajVsbOV5TmpzgsxSn7oyiq7mWglYnMVXV40lWTdu9DrhiePlu4AvAbw/3f6oGbzW5JckpSc6sqvm/a/8RLKaJKPPVdK5rNm7l8eGEnMeffZFrNm7lU9dd3lTceWtygs9SnbozX13NtRR0dRLT6VMK+3ng9OHllcBzU263b7jvDZLckGQiycTk5NynrCymiSjz1XSuL33zW7Nut6XJCT5LderOfHU111LQ+UlMw7P0Ob8pfFXdXlXjVTU+Njb3KSuLaSLKfDWd67JVp8663ZYmJ/gs1ak789XVXEtBJyYxDZdlPldVq4fbXwOuqKoDSc4EvlBVFyb5T8PL906/3WzHn++wji5NRDlems51zcatfOmb3+KyVad2YknmsCYn+PR16s7x0tVcS0Hrk5hmKPdbgZeqakOS9cCpVfWRJD8PfBB4D3A58Imquuxox3cSkyTN3WzlftRfqCa5l8EvT1ck2QfcAmwA7k9yHbAH+JXhzR9iUOy7gO8AvzZyeknSnB3Ls2Xee4Sr3jBdebj+fuOooSRJo/EVqpLUQ5a7JPWQ5S5JPWS5S1IPWe6S1EOWuyT1kOUuST1kuUtSD1nuktRDlrsk9ZDlPtTkJKAmLZUpOU3e/139WkoL6ajvLbMUNDkJqElLZUpOk/d/V7+W0kLzzJ1mJwE1aalMyWny/u/q11JaaJY7zU4CatJSmZLT5P3f1a+ltNBcluFvf2xvahJQUy49Zzmbrl/T+yk5Td7/Xf1aSgvtmCYxHW9OYpKkuZttEpPLMpLUQ5a7JPWQ5S5JPWS5S1IPWe6S1EOWuyT1kOUuST1kuUtSD1nuktRDlrsk9ZDlLkk9NFK5J/mtJDuSbE9yb5I3Jzk3ydYku5L8lyQnNRVWknRs5l3uSVYCvwGMV9Vq4ETgauDfAx+vqr8HvAxc10TQ422pTDyStDSM+pa/y4AfTPJ94GTgAPDTwPuG198N/B5w24h/z3G1VCYeSVo65n3mXlX7gd8H9jIo9W8D24BXqurg8Gb7gJUzfX6SG5JMJJmYnJycb4xGLJWJR5KWjlGWZZYD64BzgbcBbwHWHuvnV9XtVTVeVeNjY2PzjdGIpTLxSNLSMcqyzM8A36iqSYAknwZ+AjglybLh2ftZwP7RYx5fS2XikaSlY5Ry3wusSXIy8P+AK4EJ4DHgl4H7gGuBz44aciFces5yS11Sb4yy5r4VeAB4Anh6eKzbgd8G/mWSXcBpwMYGckqS5mCkZ8tU1S3ALdN27wYuG+W4kqTR+ApVSeohy12Seshyl6QestwlqYcsd0nqIctdknrIcpekHrLcJamHLHdJ6iHLXZJ6yHJXJzQ5CcupWtLok5ikkTU5CcupWtKAZ+5qXZOTsJyqJQ1Y7mpdk5OwnKolDaSq2s7A+Ph4TUxMtB1DLdq25+XGJmE1eSypy5Jsq6rxma5zzV2d0OQkLKdqSS7LSFIvWe6S1EOWuyT1kOUuST1kuUtSD1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ5a7JPXQSOWe5JQkDyT5apKdSX48yalJHk3y7PCjb/IhSQts1DP3PwQeqap3AO8EdgLrgc1VdT6webgtSVpA8y73JD8E/CSwEaCqXq2qV4B1wN3Dm90N/NKoISVJczPKmfu5wCTwJ0meTHJHkrcAp1fVgeFtngdOn+mTk9yQZCLJxOTk5AgxJEnTjVLuy4BLgNuq6l3AXzNtCaYGk0BmnAZSVbdX1XhVjY+NjY0QQ5I03Sjlvg/YV1Vbh9sPMCj7v0pyJsDw4wujRZQkzdW8y72qngeeS3LhcNeVwDPAg8C1w33XAp8dKaEkac5GHbP3IWBTkpOA3cCvMfgP4/4k1wF7gF8Z8e+QJM3RSOVeVV8GZhrOeuUox5UkjcZXqEpSD1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ5a7JPWQ5S5JPWS5S1IPWe6S1EOW+9CGh3Zyxa2PseGhnW1HkaSRjfrGYb2w4aGdfPLx3QCvfVz/nh9pM5IkjcQzd+CRHc/Pui1Ji43lDqy9+IxZtyVpsXFZhr9dgnlkx/OsvfgMl2QkLXoZjDlt1/j4eE1MTLQdQ5IWlSTbqmqmmRouy0hSH1nuktRDlrsk9ZDlLkk9ZLlLUg9Z7pLUQ514KmSSSWBP2zmAFcCLbYeYQVdzQXezmWtuzDU3Xcl1TlWNzXRFJ8q9K5JMHOk5o23qai7objZzzY255qaruaZyWUaSeshyl6Qestxf7/a2AxxBV3NBd7OZa27MNTddzfUa19wlqYc8c5ekHrLcJamHLPehJGuTfC3JriTr284DkOTsJI8leSbJjiS/2XamqZKcmOTJJJ9rO8thSU5J8kCSrybZmeTH284EkOS3hl/D7UnuTfLmlnLcmeSFJNun7Ds1yaNJnh1+XN6RXLcOv45PJflMklMWOteRsk257sNJKsmKNrLNxnJnUFLAHwNXARcB701yUbupADgIfLiqLgLWADd2JNdhvwl0baL4HwKPVNU7gHfSgXxJVgK/AYxX1WrgRODqluLcBaydtm89sLmqzgc2D7cX2l28MdejwOqq+lHg68DNCx1q6C7emI0kZwM/C+xd6EDHwnIfuAzYVVW7q+pV4D5gXcuZqKoDVfXE8PL/ZVBUK9tNNZDkLODngTvaznJYkh8CfhLYCFBVr1bVK+2mes0y4AeTLANOBv6yjRBV9TjwrWm71wF3Dy/fDfzSgoZi5lxV9fmqOjjc3AKctdC5hjlmus8APg58BOjks1Is94GVwHNTtvfRkRI9LMkq4F3A1naTvOYPGHxjH2o7yBTnApPAnwyXi+5I8pa2Q1XVfuD3GZzhHQC+XVWfbzfV65xeVQeGl58HTm8zzBH8OvBw2yEOS7IO2F9VX2k7y5FY7otAkr8D/Ffgpqr6Px3I8wvAC1W1re0s0ywDLgFuq6p3AX9NO0sMrzNcw17H4D+ftwFvSfJP2k01sxo8N7pTZ6JJfofBEuWmtrMAJDkZ+Cjwu21nmY3lPrAfOHvK9lnDfa1L8iYGxb6pqj7ddp6hnwB+Mck3GSxh/XSSP203EjD4iWtfVR3+6eYBBmXftp8BvlFVk1X1feDTwD9oOdNUf5XkTIDhxxdazvOaJL8K/ALw/urOi3J+mMF/1F8ZPgbOAp5Ickarqaax3Af+N3B+knOTnMTgl10PtpyJJGGwfryzqj7Wdp7DqurmqjqrqlYxuK/+R1W1fiZaVc8DzyW5cLjrSuCZFiMdthdYk+Tk4df0Sjrwi94pHgSuHV6+Fvhsi1lek2Qtg6W/X6yq77Sd57Cqerqq3lpVq4aPgX3AJcPvv86w3IHhL20+CPw5gwfd/VW1o91UwOAM+QMMzoy/PPzznrZDddyHgE1JngJ+DPi3Ledh+JPEA8ATwNMMHnetvHw9yb3AF4ELk+xLch2wAfjHSZ5l8FPGho7k+iPg7wKPDr/3P7nQuWbJ1nm+/YAk9ZBn7pLUQ5a7JPWQ5S5JPWS5S1IPWe6S1EOWuyT1kOUuST30/wEiVuGnJABu9AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = cereal_data[[\"sugars\"]]\n",
        "y = cereal_data[[\"calories\"]]\n",
        "\n",
        "plt.plot(x,y,\".\")\n",
        "plt.xlabel(\"Sugars\")\n",
        "plt.ylabel(\"Calories\")\n",
        "plt.title(\"Sugars vs Calories\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "EUR5MHidNAGS",
        "outputId": "f597dbe3-4e0d-4f53-a57f-7d8847aee334"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Sugars vs Calories')"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = cereal_data[[\"fat\"]]\n",
        "y = cereal_data[[\"calories\"]]\n",
        "\n",
        "plt.plot(x,y,\".\")\n",
        "plt.xlabel(\"Fat\")\n",
        "plt.ylabel(\"Calories\")\n",
        "plt.title(\"Fat vs Calories\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "o3IQT96xNruv",
        "outputId": "f61dc36a-5c61-4602-92d4-1f180fe7bc62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Fat vs Calories')"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "linear_regressor = LinearRegression()"
      ],
      "metadata": {
        "id": "5mRSF-xzO02R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_regressor.fit(x,y)\n",
        "Y_pred = linear_regressor.predict(x)"
      ],
      "metadata": {
        "id": "vizNMWpUP2tV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,'.')\n",
        "plt.plot(x,Y_pred, color='red')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "3hyYEvnrQB4x",
        "outputId": "f21ebff1-8f11-46a2-fbdf-d55949799d00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for m_guess in np.linspace(-10,10,10):\n",
        "    print(m_guess)"
      ],
      "metadata": {
        "id": "q3H9x0UJQWnH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for m_guess in np.linspace(-10,10,10):\n",
        "    for b_guess in np.linspace(-10,10,10):\n",
        "\n",
        "      y-guess = m_guess * x + b_guess\n",
        "\n",
        "      plt.plot(x,y_guess,'r.')\n",
        "      plt.plot(x,y,'g.');"
      ],
      "metadata": {
        "id": "JMYR5pRZTzPH"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}